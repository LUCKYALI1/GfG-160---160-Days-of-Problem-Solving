class Solution {
  public:
   int solve(vector<int> &arr, int i, int j, vector<vector<int>> &dp) {
    if (i >= j) return 0;

    if (dp[i][j] != -1) return dp[i][j];  // Return cached result

    int minCost = INT_MAX;
    for (int k = i; k < j; ++k) {
        int cost = solve(arr, i, k, dp) + solve(arr, k + 1, j, dp) + arr[i - 1] * arr[k] * arr[j];
        minCost = min(minCost, cost);
    }

    return dp[i][j] = minCost;  // Cache and return
}

    int matrixMultiplication(vector<int> &arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, -1));  // Initialize memo table
        return solve(arr, 1, n - 1, dp);
    }


};
